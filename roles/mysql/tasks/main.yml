- name: Configuring {{COMPONENT}}
  ansible.builtin.copy:
    src: {{COMPONENT}}.repo
    dest: /etc/yum.repos.d/{{COMPONENT}}.repo  #we haven't used remote_src:yes bcoz we copying from loacal(ansible)  

- name: Installing {{COMPONENT}}
  ansible.builtin.package:
    name: mysql-community-server
    state: present

- name: Starting {{COMPONENT}} service
  ansible.builtin.systemd:
    name: mysqld
    state: started
    enabled: true

# Rescue is nothing but if the task fails then only the other task should run (or))Rescue and blocks work together ; Tasks in rescue will only be executed if the task in block fails
- name: Validate the default password 
  block: 
    - name: Get MySQL version with non-default credentials
      community.mysql.mysql_info:
        login_user: root
        login_password: RoboShop@1
        filter: version
  rescue:
    - name: Fetch the log file from the rmote note
      ansible.builtin.slurp:
        src: /var/log/mysqld.log
      register: mysql_pwd_log

- name: Grep the password and assign it to variable
  ansible.builtin.set_fact:
      DEFAULT_PASSWORD: "{{ mysql_pwd_log['content'] | b64decode | regex_findall('.*temporary password.*')| join(' ') |split(' ') | last }}"

- name: Reset {{COMPONENT}} Default root password
  ansible.builtin.shell:  echo "ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ROOT_PASSWORD}}';" | mysql --connect-expired-password -uroot -p"{{DEFAULT_PASSWORD}}"


- name: Configuring the node name 
  ansible.builtin.shell: set-hostname {{ COMPONENT }}-{{ENV}}


# - name: Download and extract {{COMPONENT}}
#   ansible.builtin.include_role:
#     name: common
#     tasks_from: download 

# - name: Injecting the mongoDB shema
#   community.mongodb.mongodb_shell:
#     file: "/tmp/{{COMPONENT}}-main/{{ item }}.js"
#     idempotent: yes                                     #idempotent means if you apply an idempotent operation or function once or multiple times, the outcome remains the same.
#   loop:
#     - catalogue
#     - users                        

# - name: Injecting the mongoDB users shema
#   community.mongodb.mongodb_shell:
#     file: "/tmp/{{ COMPONENT }}-main/users.js"
#     idempotent: yes 














